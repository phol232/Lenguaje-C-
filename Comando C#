ESTRUCTURAS DE CONTROL:

using System;

class EstructurasControl
{
    static void Main()
    {
        // 1. IF-ELSE
        Console.WriteLine("--- Ejemplo IF-ELSE ---");
        int edad = 18;
        
        if (edad >= 18) {
            Console.WriteLine("Es mayor de edad");
        } else if (edad >= 13) {
            Console.WriteLine("Es adolescente");
        } else {
            Console.WriteLine("Es menor de edad");
        }

        // 2. SWITCH
        Console.WriteLine("\n--- Ejemplo SWITCH ---");
        string diaSemana = "Lunes";
        switch (diaSemana)
        {
            case "Lunes":
                Console.WriteLine("Inicio de semana");
                break;
            case "Viernes":
                Console.WriteLine("¡Fin de semana!");
                break;
            default:
                Console.WriteLine("Día entre semana");
                break;
        }

        // 3. FOR
        Console.WriteLine("\n--- Ejemplo FOR ---");
        for (int i = 0; i < 5; i++)
        {
            Console.WriteLine($"Iteración número: {i}");
        }

        // 4. WHILE
        Console.WriteLine("\n--- Ejemplo WHILE ---");
        int contador = 0;
        while (contador < 3)
        {
            Console.WriteLine($"Contador está en: {contador}");
            contador++;
        }

        // 5. DO-WHILE
        Console.WriteLine("\n--- Ejemplo DO-WHILE ---");
        int numero = 1;
        do
        {
            Console.WriteLine($"El número es: {numero}");
            numero *= 2;
        } while (numero <= 8);

        // 6. FOREACH
        Console.WriteLine("\n--- Ejemplo FOREACH ---");
        string[] frutas = { "Manzana", "Banana", "Naranja" };
        foreach (string fruta in frutas)
        {
            Console.WriteLine($"Fruta: {fruta}");
        }

        // 7. CONTINUE y BREAK
        Console.WriteLine("\n--- Ejemplo CONTINUE y BREAK ---");
        for (int i = 0; i < 5; i++)
        {
            if (i == 2) continue; // Salta la iteración cuando i es 2
            if (i == 4) break;    // Termina el ciclo cuando i es 4
            Console.WriteLine($"Número: {i}");
        }

        // 8. Estructura de control anidada
        Console.WriteLine("\n--- Ejemplo Estructuras Anidadas ---");
        for (int i = 1; i <= 3; i++)
        {
            for (int j = 1; j <= 3; j++)
            {
                if (i == j)
                {
                    Console.WriteLine($"i y j son iguales: {i}");
                }
            }
        }

        // 9. Switch con pattern matching (C# moderno)
        Console.WriteLine("\n--- Ejemplo Switch con Pattern Matching ---");
        object item = 123;
        switch (item)
        {
            case int n when n > 100:
                Console.WriteLine($"Número mayor que 100: {n}");
                break;
            case string s:
                Console.WriteLine($"Es una cadena: {s}");
                break;
            case null:
                Console.WriteLine("Es null");
                break;
            default:
                Console.WriteLine("Otro tipo");
                break;
        }

        // 10. Using statement (control de recursos)
        Console.WriteLine("\n--- Ejemplo Using ---");
        using (System.IO.StreamWriter writer = new System.IO.StreamWriter("test.txt"))
        {
            writer.WriteLine("Ejemplo de using");
        } // El archivo se cierra automáticamente
    }
}




PROGRAMACION ORIENTADA OBJETOS:

using System;

// 1. Encapsulamiento
public class Persona
{
    // Campos privados
    private string _nombre;
    private int _edad;

    // Propiedades públicas
    public string Nombre
    {
        get { return _nombre; }
        set 
        { 
            if (string.IsNullOrEmpty(value))
                throw new ArgumentException("El nombre no puede estar vacío");
            _nombre = value;
        }
    }

    // Propiedad con sintaxis abreviada
    public string Apellido { get; set; }

    // Propiedad de solo lectura
    public int Edad
    {
        get { return _edad; }
        private set { _edad = value; }
    }

    // Constructor
    public Persona(string nombre, string apellido, int edad)
    {
        Nombre = nombre;
        Apellido = apellido;
        _edad = edad;
    }
}

// 2. Herencia
public abstract class Vehiculo
{
    public string Marca { get; set; }
    public string Modelo { get; set; }

    // Método abstracto
    public abstract void Arrancar();

    // Método virtual que puede ser sobrescrito
    public virtual string ObtenerInformacion()
    {
        return $"Vehículo {Marca} {Modelo}";
    }
}

// Clase derivada
public class Coche : Vehiculo
{
    public int NumeroPuertas { get; set; }

    // Implementación del método abstracto
    public override void Arrancar()
    {
        Console.WriteLine("El coche arranca con la llave");
    }

    // Sobrescritura del método virtual
    public override string ObtenerInformacion()
    {
        return base.ObtenerInformacion() + $" con {NumeroPuertas} puertas";
    }
}

// 3. Interfaces
public interface IVolador
{
    void Despegar();
    void Aterrizar();
}

public interface IMantenible
{
    void RealizarMantenimiento();
}

// Clase que implementa múltiples interfaces
public class Avion : Vehiculo, IVolador, IMantenible
{
    public override void Arrancar()
    {
        Console.WriteLine("El avión enciende sus motores");
    }

    public void Despegar()
    {
        Console.WriteLine("El avión despega");
    }

    public void Aterrizar()
    {
        Console.WriteLine("El avión aterriza");
    }

    public void RealizarMantenimiento()
    {
        Console.WriteLine("Realizando mantenimiento del avión");
    }
}

// 4. Polimorfismo
public class Empleado : Persona
{
    public decimal Salario { get; set; }

    public Empleado(string nombre, string apellido, int edad, decimal salario) 
        : base(nombre, apellido, edad)
    {
        Salario = salario;
    }

    public virtual decimal CalcularSalarioAnual()
    {
        return Salario * 12;
    }
}

public class Gerente : Empleado
{
    public decimal Bonus { get; set; }

    public Gerente(string nombre, string apellido, int edad, decimal salario, decimal bonus) 
        : base(nombre, apellido, edad, salario)
    {
        Bonus = bonus;
    }

    public override decimal CalcularSalarioAnual()
    {
        return base.CalcularSalarioAnual() + Bonus;
    }
}

// 5. Clase estática
public static class Utilidades
{
    public static int ContadorInstancias { get; private set; }

    public static void IncrementarContador()
    {
        ContadorInstancias++;
    }
}

// Programa principal para demostrar el uso
class Program
{
    static void Main()
    {
        try
        {
            // Crear instancias y usar encapsulamiento
            Persona persona = new Persona("Juan", "Pérez", 30);
            Console.WriteLine($"Persona: {persona.Nombre} {persona.Apellido}");

            // Usar herencia y polimorfismo
            Coche coche = new Coche
            {
                Marca = "Toyota",
                Modelo = "Corolla",
                NumeroPuertas = 4
            };
            coche.Arrancar();
            Console.WriteLine(coche.ObtenerInformacion());

            // Usar interfaces
            Avion avion = new Avion
            {
                Marca = "Boeing",
                Modelo = "747"
            };
            avion.Arrancar();
            avion.Despegar();
            avion.Aterrizar();
            avion.RealizarMantenimiento();

            // Demostrar polimorfismo
            Empleado empleado = new Empleado("Ana", "García", 25, 30000);
            Gerente gerente = new Gerente("Carlos", "López", 40, 50000, 10000);

            Console.WriteLine($"Salario anual empleado: {empleado.CalcularSalarioAnual():C}");
            Console.WriteLine($"Salario anual gerente: {gerente.CalcularSalarioAnual():C}");

            // Usar clase estática
            Utilidades.IncrementarContador();
            Console.WriteLine($"Contador: {Utilidades.ContadorInstancias}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}




LINQ:

using System;
using System.Collections.Generic;
using System.Linq;

public class EjemplosLINQ
{
    public static void Main()
    {
        // Datos de ejemplo
        List<Producto> productos = new List<Producto>
        {
            new Producto { Id = 1, Nombre = "Laptop", Precio = 1200, Categoria = "Electrónica" },
            new Producto { Id = 2, Nombre = "Smartphone", Precio = 800, Categoria = "Electrónica" },
            new Producto { Id = 3, Nombre = "Mesa", Precio = 200, Categoria = "Muebles" },
            new Producto { Id = 4, Nombre = "Silla", Precio = 100, Categoria = "Muebles" },
            new Producto { Id = 5, Nombre = "Tablet", Precio = 300, Categoria = "Electrónica" }
        };

        // 1. Filtrado básico (Where)
        var productosCaros = productos.Where(p => p.Precio > 500);
        Console.WriteLine("Productos caros:");
        foreach (var p in productosCaros)
            Console.WriteLine($"{p.Nombre}: ${p.Precio}");

        // 2. Ordenamiento (OrderBy, ThenBy)
        var productosOrdenados = productos
            .OrderBy(p => p.Categoria)
            .ThenByDescending(p => p.Precio);
        Console.WriteLine("\nProductos ordenados por categoría y precio:");
        foreach (var p in productosOrdenados)
            Console.WriteLine($"{p.Categoria} - {p.Nombre}: ${p.Precio}");

        // 3. Selección (Select)
        var nombresProductos = productos.Select(p => p.Nombre);
        Console.WriteLine("\nNombres de productos:");
        foreach (var nombre in nombresProductos)
            Console.WriteLine(nombre);

        // 4. Agrupación (GroupBy)
        var gruposPorCategoria = productos.GroupBy(p => p.Categoria);
        Console.WriteLine("\nProductos agrupados por categoría:");
        foreach (var grupo in gruposPorCategoria)
        {
            Console.WriteLine($"\nCategoría: {grupo.Key}");
            foreach (var p in grupo)
                Console.WriteLine($"  {p.Nombre}: ${p.Precio}");
        }

        // 5. Agregación (Count, Sum, Average, Min, Max)
        var totalProductos = productos.Count();
        var precioTotal = productos.Sum(p => p.Precio);
        var precioPromedio = productos.Average(p => p.Precio);
        var precioMinimo = productos.Min(p => p.Precio);
        var precioMaximo = productos.Max(p => p.Precio);

        Console.WriteLine("\nEstadísticas:");
        Console.WriteLine($"Total productos: {totalProductos}");
        Console.WriteLine($"Precio total: ${precioTotal}");
        Console.WriteLine($"Precio promedio: ${precioPromedio:F2}");
        Console.WriteLine($"Precio mínimo: ${precioMinimo}");
        Console.WriteLine($"Precio máximo: ${precioMaximo}");

        // 6. First, Single, Any, All
        var primerElectronico = productos.First(p => p.Categoria == "Electrónica");
        var existenMuebles = productos.Any(p => p.Categoria == "Muebles");
        var todosSonCaros = productos.All(p => p.Precio > 1000);

        Console.WriteLine($"\nPrimer producto electrónico: {primerElectronico.Nombre}");
        Console.WriteLine($"¿Existen muebles?: {existenMuebles}");
        Console.WriteLine($"¿Todos son caros?: {todosSonCaros}");

        // 7. Take, Skip, Take While
        var primerosTres = productos.Take(3);
        var saltarDos = productos.Skip(2);
        var takeWhile = productos.TakeWhile(p => p.Precio > 300);

        // 8. Join
        List<Categoria> categorias = new List<Categoria>
        {
            new Categoria { Id = 1, Nombre = "Electrónica" },
            new Categoria { Id = 2, Nombre = "Muebles" }
        };

        var join = productos.Join(
            categorias,
            producto => producto.Categoria,
            categoria => categoria.Nombre,
            (producto, categoria) => new { 
                ProductoNombre = producto.Nombre, 
                CategoriaNombre = categoria.Nombre 
            });

        Console.WriteLine("\nJoin de productos y categorías:");
        foreach (var item in join)
            Console.WriteLine($"{item.ProductoNombre} - {item.CategoriaNombre}");

        // 9. Let y Into (Query Syntax)
        var queryConLet = from p in productos
                         let precioConImpuesto = p.Precio * 1.16m
                         where precioConImpuesto > 500
                         select new { 
                             p.Nombre, 
                             PrecioOriginal = p.Precio, 
                             PrecioConImpuesto = precioConImpuesto 
                         };

        Console.WriteLine("\nPrecios con impuesto:");
        foreach (var item in queryConLet)
            Console.WriteLine($"{item.Nombre}: ${item.PrecioOriginal} -> ${item.PrecioConImpuesto:F2}");
    }
}

public class Producto
{
    public int Id { get; set; }
    public string Nombre { get; set; }
    public decimal Precio { get; set; }
    public string Categoria { get; set; }
}

public class Categoria
{
    public int Id { get; set; }
    public string Nombre { get; set; }
}

COLECCIONES:

using System;
using System.Collections.Generic;

public class EjemplosColecciones
{
    public static void Main()
    {
        // 1. List<T>
        List<string> lista = new List<string>();
        lista.Add("Uno");
        lista.Add("Dos");
        lista.Add("Tres");
        Console.WriteLine("Lista:");
        lista.ForEach(item => Console.WriteLine(item));

        // 2. Dictionary<TKey, TValue>
        Dictionary<string, int> diccionario = new Dictionary<string, int>();
        diccionario.Add("Uno", 1);
        diccionario.Add("Dos", 2);
        Console.WriteLine("\nDiccionario:");
        foreach (var kvp in diccionario)
            Console.WriteLine($"Clave: {kvp.Key}, Valor: {kvp.Value}");

        // 3. HashSet<T>
        HashSet<int> conjunto = new HashSet<int>();
        conjunto.Add(1);
        conjunto.Add(2);
        conjunto.Add(1); // No se añade (duplicado)
        Console.WriteLine("\nHashSet:");
        foreach (var item in conjunto)
            Console.WriteLine(item);

        // 4. Queue<T>
        Queue<string> cola = new Queue<string>();
        cola.Enqueue("Primero");
        cola.Enqueue("Segundo");
        Console.WriteLine("\nCola:");
        while (cola.Count > 0)
            Console.WriteLine(cola.Dequeue());

        // 5. Stack<T>
        Stack<string> pila = new Stack<string>();
        pila.Push("Primero");
        pila.Push("Segundo");
        Console.WriteLine("\nPila:");
        while (pila.Count > 0)
            Console.WriteLine(pila.Pop());

        // 6. LinkedList<T>
        LinkedList<string> listaEnlazada = new LinkedList<string>();
        listaEnlazada.AddLast("Uno");
        listaEnlazada.AddLast("Dos");
        Console.WriteLine("\nLista Enlazada:");
        foreach (var item in listaEnlazada)
            Console.WriteLine(item);

        // 7. SortedList<TKey, TValue>
        SortedList<int, string> listaOrdenada = new SortedList<int, string>();
        listaOrdenada.Add(3, "Tres");
        listaOrdenada.Add(1, "Uno");
        listaOrdenada.Add(2, "Dos");
        Console.WriteLine("\nLista Ordenada:");
        foreach (var item in listaOrdenada)
            Console.WriteLine($"{item.Key}: {item.Value}");
    }
}

MANEJO DE EXCEPCIONES:

using System;
using System.IO;

public class EjemplosExcepciones
{
    public static void Main()
    {
        // 1. Try-Catch básico
        try
        {
            Console.WriteLine("División entre números:");
            int numerador = 10;
            int denominador = 0;
            int resultado = numerador / denominador;
        }
        catch (DivideByZeroException ex)
        {
            Console.WriteLine($"Error de división: {ex.Message}");
        }

        // 2. Múltiples catch
        try
        {
            string[] array = new string[3];
            array[5] = "Test"; // Generará excepción
        }
        catch (IndexOutOfRangeException ex)
        {
            Console.WriteLine($"Error de índice: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error general: {ex.Message}");
        }

        // 3. Finally
        FileStream archivo = null;
        try
        {
            archivo = File.Open("archivo.txt", FileMode.Open);
            // Código que trabaja con el archivo
        }
        catch (FileNotFoundException ex)
        {
            Console.WriteLine($"No se encontró el archivo: {ex.Message}");
        }
        finally
        {
            if (archivo != null)
                archivo.Dispose();
        }

        // 4. Throw y excepciones personalizadas
        try
        {
            ValidarEdad(-5);
        }
        catch (EdadInvalidaException ex)
        {
            Console.WriteLine($"Error de validación: {ex.Message}");
        }

        // 5. Using statement (manejo automático de recursos)
        try
        {
            using (StreamWriter writer = new StreamWriter("test.txt"))
            {
                writer.WriteLine("Prueba");
            } // Se cierra automáticamente
        }
        catch (IOException ex)
        {
            Console.WriteLine($"Error de E/S: {ex.Message}");
        }

        // 6. Exception filtering (C# 6+)
        try
        {
            throw new Exception("Error con código 404");
        }
        catch (Exception ex) when (ex.Message.Contains("404"))
        {
            Console.WriteLine("Error 404 capturado");
        }

        // 7. Nested try-catch
        try
        {
            try
            {
                throw new ArgumentException("Error en argumento");
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine("Capturado en bloque interno");
                throw; // Re-throw
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Capturado en bloque externo");
        }
    }

    // Excepción personalizada
    public class EdadInvalidaException : Exception
    {
        public EdadInvalidaException() : base() { }
        public EdadInvalidaException(string message) : base(message) { }
        public EdadInvalidaException(string message, Exception inner) 
            : base(message, inner) { }
    }

    // Método que lanza excepción personalizada
    public static void ValidarEdad(int edad)
    {
        if (edad < 0)
            throw new EdadInvalidaException("La edad no puede ser negativa");
    }
}

MÉTODOS Y FUNCIONES:

using System;

public class EjemplosMetodos
{
    // 1. Método básico
    public void MetodoSimple()
    {
        Console.WriteLine("Método simple");
    }

    // 2. Método con parámetros
    public int Sumar(int a, int b)
    {
        return a + b;
    }

    // 3. Método con parámetros opcionales
    public string Saludar(string nombre, string saludo = "Hola")
    {
        return $"{saludo}, {nombre}!";
    }

    // 4. Método con parámetros por referencia
    public void Intercambiar(ref int a, ref int b)
    {
        int temp = a;
        a = b;
        b = temp;
    }

    // 5. Método con parámetros de salida
    public bool DividirConResultado(int numerador, int denominador, out double resultado)
    {
        if (denominador != 0)
        {
            resultado = (double)numerador / denominador;
            return true;
        }
        resultado = 0;
        return false;
    }

    // 6. Método con número variable de argumentos
    public int Sumar(params int[] numeros)
    {
        int suma = 0;
        foreach (int num in numeros)
            suma += num;
        return suma;
    }

    // 7. Método genérico
    public T ObtenerPrimero<T>(T[] array)
    {
        if (array.Length > 0)
            return array[0];
        return default(T);
    }

    // 8. Método estático
    public static double CalcularArea(double radio)
    {
        return Math.PI * radio * radio;
    }

    // 9. Método de extensión
    public static class ExtensionMethods
    {
        public static int ContarPalabras(this string str)
        {
            return str.Split(new char[] { ' ' }, 
                           StringSplitOptions.RemoveEmptyEntries).Length;
        }
    }

    // 10. Método asíncrono
    public async Task<string> ObtenerDatosAsync()
    {
        await Task.Delay(1000); // Simula operación asíncrona
        return "Datos obtenidos";
    }

    // Programa principal para demostrar el uso
    public static void Main()
    {
        var ejemplo = new EjemplosMetodos();

        // Uso de métodos básicos
        ejemplo.MetodoSimple();

        // Uso de método con parámetros
        Console.WriteLine($"Suma: {ejemplo.Sumar(5, 3)}");

        // Uso de método con parámetros opcionales
        Console.WriteLine(ejemplo.Saludar("Juan"));
        Console.WriteLine(ejemplo.Saludar("María", "Buenos días"));

        // Uso de parámetros por referencia
        int x = 1, y = 2;
        ejemplo.Intercambiar(ref x, ref y);
        Console.WriteLine($"Después de intercambiar: x={x}, y={y}");

        // Uso de parámetros de salida
        double resultado;
        if (ejemplo.DividirConResultado(10, 2, out resultado))
            Console.WriteLine($"Resultado: {resultado}");

        // Uso de params
        Console.WriteLine($"Suma total: {ejemplo.Sumar(1, 2, 3, 4, 5)}");

        // Uso de método genérico
        string[] nombres = { "Ana", "Juan", "Pedro" };
        Console.WriteLine($"Primer nombre: {ejemplo.ObtenerPrimero(nombres)}");

        // Uso de método estático
        Console.WriteLine($"Área del círculo: {CalcularArea(5)}");

        // Uso de método de extensión
        string texto = "Este es un ejemplo";
        Console.WriteLine($"Número de palabras: {texto.ContarPalabras()}");

        // Uso de método asíncrono
        var tarea = ejemplo.ObtenerDatosAsync();
        tarea.Wait();
        Console.WriteLine(tarea.Result);
    }
}
